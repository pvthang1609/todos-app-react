{"version":3,"sources":["img/Tick.svg","img/Un-Tick.svg","img/Clear.svg","img/Tick-all.svg","components/block.js","Main.js","serviceWorker.js","index.js"],"names":["module","exports","classnames","require","Block","this","props","todo","onclick_tick","onclick_clear","ondoubleclick","onkeyup","url","untick","isDone","tick","className","onClick","src","alt","type","isEdit","placeholder","onKeyUp","onDoubleClick","title","clear","Component","Main","state","todos","display","inputElement","React","createRef","indexG","numTodoNotDone","statusItem","bind","handleChange","modeDisplay","filterTodos","editTodo","handleEdit","current","focus","index","indexOf","setState","slice","newTodo","sum","forEach","newState","event","keyCode","target","value","mode","filter","tickall","length","tickAll","map","onItemClickTick","onItemClickClear","key","ref","clearComplete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6284e4c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Tick.3a8a773e.svg\";","module.exports = __webpack_public_path__ + \"static/media/Un-Tick.5d122731.svg\";","module.exports = __webpack_public_path__ + \"static/media/Clear.918ca7d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/Tick-all.57a87fdb.svg\";","import React, { Component } from \"react\";\r\nimport tick from \"../img/Tick.svg\";\r\nimport untick from \"../img/Un-Tick.svg\";\r\nimport clear from \"../img/Clear.svg\";\r\n\r\nconst classnames = require(\"classnames\");\r\n\r\nclass Block extends Component {\r\n  render() {\r\n    let { todo, onclick_tick, onclick_clear, ondoubleclick, onkeyup } = this.props;\r\n    let url = untick;\r\n    if (todo.isDone) {\r\n      url = tick;\r\n    }\r\n    return (\r\n      <div className={classnames(\"block\", { \"block-done\": todo.isDone })}>\r\n        <img\r\n          onClick={onclick_tick}\r\n          src={url}\r\n          alt=\"none\"\r\n          className={classnames(\"tick-icon\", { \"tick-icon-done\": todo.isDone })}\r\n        />\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            className={classnames(\"input-edit\", {\"input-edit-active\": todo.isEdit})}\r\n            placeholder='Edit todo...'\r\n            onKeyUp={onkeyup}\r\n          ></input>\r\n          <p onDoubleClick={ondoubleclick} className={classnames({\"p-unactive\": todo.isEdit})}>{todo.title}</p>\r\n        </div>\r\n        <img\r\n          onClick={onclick_clear}\r\n          src={clear}\r\n          alt=\"none\"\r\n          className=\"clear-icon\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Block;\r\n","import React, { Component } from \"react\";\r\nimport Block from \"./components/block\";\r\nimport tickall from \"./img/Tick-all.svg\";\r\n\r\nconst classnames = require(\"classnames\");\r\n\r\nclass Main extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todos: [\r\n        // { title: \"learning advance Javascript\",isEdit: false, isDone: false },\r\n        // { title: \"learning react\", isEdit: false, isDone: false },\r\n        // { title: \"learning react-native\", isEdit: false, isDone: false },\r\n      ],\r\n      display: \"all\", //3 trang thai: all- active- complete\r\n    };\r\n    this.inputElement = React.createRef();      // create reference to varible inputElement\r\n    this.indexG =0;\r\n    \r\n    this.numTodoNotDone = 0;\r\n    this.statusItem = this.statusItem.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.modeDisplay = this.modeDisplay.bind(this);\r\n    this.filterTodos = this.filterTodos.bind(this);\r\n    this.editTodo = this.editTodo.bind(this);\r\n    this.handleEdit =this.handleEdit.bind(this)\r\n  }\r\n  componentDidMount() {           // component was mounted then run line code\r\n    this.inputElement.current.focus()   \r\n  }\r\n  onItemClickTick(todo) {\r\n    const isDone = todo.isDone;\r\n    const { todos } = this.state;\r\n    let index = this.state.todos.indexOf(todo);\r\n    this.setState({\r\n      todos: [\r\n        ...todos.slice(0, index),\r\n        {\r\n          ...todo,\r\n          isDone: !isDone,\r\n        },\r\n        ...todos.slice(index + 1),\r\n      ],\r\n      newTodo: \"\",\r\n    });\r\n  }\r\n  onItemClickClear(todo) {\r\n    const { todos } = this.state;\r\n    let index = this.state.todos.indexOf(todo);\r\n    this.setState({\r\n      todos: [...todos.slice(0, index), ...todos.slice(index + 1)],\r\n      newTodo: \"\",\r\n    });\r\n  }\r\n  editTodo(todo) {\r\n    const isEdit = todo.isEdit;\r\n    const { todos } = this.state;\r\n    let index = this.state.todos.indexOf(todo);\r\n    let sum = null;\r\n    todos.forEach(todo => sum+= todo.isEdit)\r\n    if (sum === 0) {\r\n      this.indexG = index;\r\n      let newState = todos.slice(0)\r\n      newState[index].isEdit = !isEdit\r\n      this.setState( {\r\n        todos: newState\r\n      })\r\n    }\r\n    else {\r\n      return;\r\n    }\r\n  }\r\n  handleChange(event) {\r\n    if (event.keyCode === 13) {\r\n      this.setState({\r\n        todos: [\r\n          ...this.state.todos.slice(0),\r\n          { title: event.target.value, isDone: false },\r\n        ],\r\n      });\r\n      event.target.value = \"\";\r\n    }\r\n  }\r\n  statusItem() {\r\n    this.numTodoNotDone = 0;\r\n    this.state.todos.forEach((todo) => {\r\n      if (!todo.isDone) {\r\n        this.numTodoNotDone = this.numTodoNotDone + 1;\r\n      }\r\n    });\r\n  }\r\n  modeDisplay(mode) {\r\n    this.setState({\r\n      display: mode,\r\n    });\r\n  }\r\n  filterTodos() {\r\n    switch (this.state.display) {\r\n      case \"active\":\r\n        return this.state.todos.filter((todo) => todo.isDone === false);\r\n      case \"complete\":\r\n        return this.state.todos.filter((todo) => todo.isDone === true);\r\n      default:\r\n        return this.state.todos.filter((todo) => todo);\r\n    }\r\n  }\r\n  clearComplete() {\r\n    this.setState({\r\n      todos: this.state.todos.filter((todo) => todo.isDone === false),\r\n    });\r\n  }\r\n  tickAll() {\r\n    let newState = this.state.todos.slice(0)\r\n    newState.forEach(todo => {\r\n      todo.isDone = true\r\n    })\r\n    this.setState(\r\n      {\r\n        todos: newState\r\n      }\r\n    )\r\n  }\r\n  handleEdit(event) {\r\n    if(event.keyCode === 13) {\r\n      let newState = this.state.todos.slice(0);\r\n      newState[this.indexG].title = event.target.value;\r\n      newState[this.indexG].isEdit = !this.state.todos[this.indexG].isEdit\r\n      this.setState(\r\n        {\r\n          todos: newState\r\n        }\r\n      )\r\n      event.target.value='';\r\n    }\r\n  }\r\n  render() {\r\n    this.statusItem();\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"header\">\r\n          <div className=\"header-tick-all\">\r\n            <img\r\n              src={tickall}\r\n              alt=\"none\"\r\n              className={classnames(\"tick-all-icon\", {\r\n                \"tick-all-icon-active\": this.numTodoNotDone === 0 && this.state.todos.length !== 0,\r\n              })}\r\n              onClick={() => this.tickAll()}\r\n            />\r\n          </div>\r\n          <div className=\"header-text\">\r\n            <p>Todos-list-app-react</p>\r\n          </div>\r\n        </div>\r\n        {\r\n          this.filterTodos().map((todo, index) => {\r\n            return (\r\n              <Block\r\n                onclick_tick={() => this.onItemClickTick(todo)}\r\n                onclick_clear={() => this.onItemClickClear(todo)}\r\n                key={index}\r\n                todo={todo}\r\n                ondoubleclick={() => this.editTodo(todo)}\r\n                onkeyup={this.handleEdit}\r\n              />\r\n            );\r\n          }) // map create new arr, for each is not\r\n        }\r\n        <p className={classnames('statusNotthing', {'statusNotthing-display': this.state.todos.length === 0})}>Nothing todo, create now..</p>\r\n        <input\r\n          type=\"text\"\r\n          className=\"input\"\r\n          placeholder=\"Create new todo..\"\r\n          onKeyUp={this.handleChange}\r\n          ref={this.inputElement}\r\n        ></input>\r\n        <div className=\"block-button\">\r\n          <div className=\"status\">{`${this.numTodoNotDone} item left`}</div>\r\n          <button\r\n            className={classnames(\"button\", {\r\n              \"button-active\": this.state.display === \"all\",\r\n            })}\r\n            onClick={() => this.modeDisplay(\"all\")}\r\n          >\r\n            All\r\n          </button>\r\n          <button\r\n            className={classnames(\"button\", {\r\n              \"button-active\": this.state.display === \"active\",\r\n            })}\r\n            onClick={() => this.modeDisplay(\"active\")}\r\n          >\r\n            Active\r\n          </button>\r\n          <button\r\n            className={classnames(\"button\", {\r\n              \"button-active\": this.state.display === \"complete\",\r\n            })}\r\n            onClick={() => this.modeDisplay(\"complete\")}\r\n          >\r\n            Complete\r\n          </button>\r\n          <button\r\n            className={classnames(\"button\", \"button-clear\", {\r\n              \"button-clear-active\": !(\r\n                this.numTodoNotDone === this.state.todos.length\r\n              ),\r\n            })}\r\n            onClick={() => this.clearComplete()}\r\n          >\r\n            Clear complete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from './Main';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById('root') \r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}