{"version":3,"sources":["img/Tick.svg","img/Un-Tick.svg","img/Clear.svg","img/Tick-all.svg","components/block.js","Main.js","serviceWorker.js","index.js"],"names":["module","exports","classnames","require","Block","this","props","todo","onclick_tick","onclick_clear","url","untick","isDone","tick","className","onClick","src","alt","title","clear","Component","Main","state","todos","display","inputElement","React","createRef","numTodoNotDone","statusItem","bind","handleChange","modeDisplay","filterTodos","current","focus","index","indexOf","setState","slice","newTodo","event","keyCode","target","value","forEach","mode","filter","newState","tickall","length","tickAll","map","onItemClickTick","onItemClickClear","key","type","placeholder","onKeyUp","ref","clearComplete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5911f5f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Tick.3a8a773e.svg\";","module.exports = __webpack_public_path__ + \"static/media/Un-Tick.5d122731.svg\";","module.exports = __webpack_public_path__ + \"static/media/Clear.918ca7d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/Tick-all.57a87fdb.svg\";","import React, { Component } from \"react\";\r\nimport tick from \"../img/Tick.svg\";\r\nimport untick from \"../img/Un-Tick.svg\";\r\nimport clear from \"../img/Clear.svg\"\r\n\r\nconst classnames = require(\"classnames\");\r\n\r\nclass Block extends Component {\r\n  render() {\r\n    let { todo, onclick_tick, onclick_clear } = this.props;\r\n    let url = untick;\r\n    if (todo.isDone) {\r\n      url = tick;\r\n    }\r\n    return (\r\n      <div className={classnames(\"block\", { \"block-done\": todo.isDone })}>\r\n        <img onClick={onclick_tick} src={url} alt=\"none\" className={classnames('tick-icon', { 'tick-icon-done': todo.isDone})} />\r\n        <div>\r\n          <p>{todo.title}</p>\r\n        </div>\r\n        <img onClick={onclick_clear} src={clear} alt=\"none\" className='clear-icon' />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Block;\r\n","import React, { Component } from \"react\";\r\nimport Block from \"./components/block\";\r\nimport tickall from \"./img/Tick-all.svg\";\r\n\r\nconst classnames = require(\"classnames\");\r\n\r\nclass Main extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todos: [\r\n        // { title: \"learning advance Javascript\", isDone: false },\r\n        // { title: \"learning react\", isDone: false },\r\n        // { title: \"learning react-native\", isDone: false },\r\n      ],\r\n      display: \"all\", //3 trang thai: all- active- complete\r\n    };\r\n    this.inputElement = React.createRef();      // create reference to varible inputElement\r\n    \r\n    this.numTodoNotDone = 0;\r\n    this.statusItem = this.statusItem.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.modeDisplay = this.modeDisplay.bind(this);\r\n    this.filterTodos = this.filterTodos.bind(this);\r\n  }\r\n  componentDidMount() {           // component was mounted then run line code\r\n    this.inputElement.current.focus()   \r\n  }\r\n  onItemClickTick(todo) {\r\n    const isDone = todo.isDone;\r\n    const { todos } = this.state;\r\n    let index = this.state.todos.indexOf(todo);\r\n    this.setState({\r\n      todos: [\r\n        ...todos.slice(0, index),\r\n        {\r\n          ...todo,\r\n          isDone: !isDone,\r\n        },\r\n        ...todos.slice(index + 1),\r\n      ],\r\n      newTodo: \"\",\r\n    });\r\n  }\r\n  onItemClickClear(todo) {\r\n    const { todos } = this.state;\r\n    let index = this.state.todos.indexOf(todo);\r\n    this.setState({\r\n      todos: [...todos.slice(0, index), ...todos.slice(index + 1)],\r\n      newTodo: \"\",\r\n    });\r\n  }\r\n  handleChange(event) {\r\n    if (event.keyCode === 13) {\r\n      this.setState({\r\n        todos: [\r\n          ...this.state.todos.slice(0),\r\n          { title: event.target.value, isDone: false },\r\n        ],\r\n      });\r\n      event.target.value = \"\";\r\n    }\r\n  }\r\n  statusItem() {\r\n    this.numTodoNotDone = 0;\r\n    this.state.todos.forEach((todo) => {\r\n      if (!todo.isDone) {\r\n        this.numTodoNotDone = this.numTodoNotDone + 1;\r\n      }\r\n    });\r\n  }\r\n  modeDisplay(mode) {\r\n    this.setState({\r\n      display: mode,\r\n    });\r\n  }\r\n  filterTodos() {\r\n    switch (this.state.display) {\r\n      case \"active\":\r\n        return this.state.todos.filter((todo) => todo.isDone === false);\r\n      case \"complete\":\r\n        return this.state.todos.filter((todo) => todo.isDone === true);\r\n      default:\r\n        return this.state.todos.filter((todo) => todo);\r\n    }\r\n  }\r\n  clearComplete() {\r\n    this.setState({\r\n      todos: this.state.todos.filter((todo) => todo.isDone === false),\r\n    });\r\n  }\r\n  tickAll() {\r\n    let newState = this.state.todos.slice(0)\r\n    newState.forEach(todo => {\r\n      todo.isDone = true\r\n    })\r\n    this.setState(\r\n      {\r\n        todos: newState\r\n      }\r\n    )\r\n  }\r\n  render() {\r\n    this.statusItem();\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"header\">\r\n          <div className=\"header-tick-all\">\r\n            <img\r\n              src={tickall}\r\n              alt=\"none\"\r\n              className={classnames(\"tick-all-icon\", {\r\n                \"tick-all-icon-active\": this.numTodoNotDone === 0 && this.state.todos.length !== 0,\r\n              })}\r\n              onClick={() => this.tickAll()}\r\n            />\r\n          </div>\r\n          <div className=\"header-text\">\r\n            <p>Todos-list-app-react</p>\r\n          </div>\r\n        </div>\r\n        {\r\n          this.filterTodos().map((todo, index) => {\r\n            return (\r\n              <Block\r\n                onclick_tick={() => this.onItemClickTick(todo)}\r\n                onclick_clear={() => this.onItemClickClear(todo)}\r\n                key={index}\r\n                todo={todo}\r\n              />\r\n            );\r\n          }) // map create new arr, for each is not\r\n        }\r\n        <p className={classnames('statusNotthing', {'statusNotthing-display': this.state.todos.length === 0})}>Nothing todo, create now..</p>\r\n        <input\r\n          type=\"text\"\r\n          className=\"input\"\r\n          placeholder=\"Create new todo..\"\r\n          onKeyUp={this.handleChange}\r\n          ref={this.inputElement}\r\n        ></input>\r\n        <div className=\"block-button\">\r\n          <div className=\"status\">{`${this.numTodoNotDone} item left`}</div>\r\n          <button\r\n            className={classnames(\"button\", {\r\n              \"button-active\": this.state.display === \"all\",\r\n            })}\r\n            onClick={() => this.modeDisplay(\"all\")}\r\n          >\r\n            All\r\n          </button>\r\n          <button\r\n            className={classnames(\"button\", {\r\n              \"button-active\": this.state.display === \"active\",\r\n            })}\r\n            onClick={() => this.modeDisplay(\"active\")}\r\n          >\r\n            Active\r\n          </button>\r\n          <button\r\n            className={classnames(\"button\", {\r\n              \"button-active\": this.state.display === \"complete\",\r\n            })}\r\n            onClick={() => this.modeDisplay(\"complete\")}\r\n          >\r\n            Complete\r\n          </button>\r\n          <button\r\n            className={classnames(\"button\", \"button-clear\", {\r\n              \"button-clear-active\": !(\r\n                this.numTodoNotDone === this.state.todos.length\r\n              ),\r\n            })}\r\n            onClick={() => this.clearComplete()}\r\n          >\r\n            Clear complete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from './Main';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById('root') \r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}